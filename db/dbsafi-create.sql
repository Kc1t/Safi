-- Verificar se o banco de dados já existe e criar se não existir
IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'SAFIDB')
BEGIN
    CREATE DATABASE SAFIDB;
    PRINT 'Banco de dados SAFIDB criado com sucesso.';
END
ELSE
BEGIN
    PRINT 'Banco de dados SAFIDB j� existe.';
END

-- Usar o banco de dados criado
USE SAFIDB;
GO

SET ANSI_NULLS ON;
SET QUOTED_IDENTIFIER ON;
GO

-- Criar tabelas

-- Tabela USER_TYPES
CREATE TABLE dbo.USER_TYPES (
    ID_USER_TYPES INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    NAMES NVARCHAR(100) NOT NULL UNIQUE
);
PRINT 'Tabela USER_TYPES criada com sucesso.';
GO

-- Tabela ANALYST_LEVELS
CREATE TABLE dbo.ANALYST_LEVELS (
    ID_ANALYST_LEVELS INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    NAME NVARCHAR(100) NOT NULL UNIQUE
);
PRINT 'Tabela ANALYST_LEVELS criada com sucesso.';
GO

-- Tabela DEPARTMENTS
CREATE TABLE dbo.DEPARTMENTS (
    ID_DEPARTMENTS INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    NAME NVARCHAR(100) NOT NULL UNIQUE
);
PRINT 'Tabela DEPARTMENTS criada com sucesso.';
GO

-- Tabela USERS
CREATE TABLE dbo.USERS (
    ID_USERS INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    NAME NVARCHAR(100) NOT NULL,
    EMAIL NVARCHAR(150) NOT NULL UNIQUE,
    ID_USER_TYPES INT NOT NULL,
    ID_ANALYST_LEVELS INT NULL,
    ID_DEPARTMENTS INT NULL,
    CREATED_AT DATETIME NOT NULL DEFAULT SYSDATETIME(),
    FOREIGN KEY (ID_USER_TYPES) REFERENCES dbo.USER_TYPES(ID_USER_TYPES),
    FOREIGN KEY (ID_ANALYST_LEVELS) REFERENCES dbo.ANALYST_LEVELS(ID_ANALYST_LEVELS),
    FOREIGN KEY (ID_DEPARTMENTS) REFERENCES dbo.DEPARTMENTS(ID_DEPARTMENTS)
);
PRINT 'Tabela USERS criada com sucesso.';
GO

-- Tabela ISSUE_TYPES
CREATE TABLE dbo.ISSUE_TYPES (
    ID_ISSUE_TYPES INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    NAME NVARCHAR(100) NOT NULL UNIQUE
);
PRINT 'Tabela ISSUE_TYPES criada com sucesso.';
GO

-- Tabela TICKETS
CREATE TABLE dbo.TICKETS (
    ID_TICKETS INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    TITLE NVARCHAR(255) NOT NULL,
    DETAILING NVARCHAR(MAX) NULL,
    STATUS NVARCHAR(20) NOT NULL DEFAULT 'open' CHECK (STATUS IN ('open', 'in_progress', 'pending', 'resolved', 'closed')),
    PRIORITY NVARCHAR(10) NOT NULL DEFAULT 'medium' CHECK (PRIORITY IN ('low', 'medium', 'high', 'urgent')),
    ID_ISSUE_TYPES INT NOT NULL,
    ID_USERS INT NOT NULL,
    ASSIGNED_TO INT NULL,
    CREATED_AT DATETIME NOT NULL DEFAULT SYSDATETIME(),
    UPDATED_AT DATETIME NULL,
    FOREIGN KEY (ID_ISSUE_TYPES) REFERENCES dbo.ISSUE_TYPES(ID_ISSUE_TYPES),
    FOREIGN KEY (ID_USERS) REFERENCES dbo.USERS(ID_USERS),
    FOREIGN KEY (ASSIGNED_TO) REFERENCES dbo.USERS(ID_USERS)
);
PRINT 'Tabela TICKETS criada com sucesso.';
GO

-- Tabela TICKET_MESSAGES
CREATE TABLE dbo.TICKET_MESSAGES (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    ID_TICKETS INT NOT NULL,
    ID_SENDER INT NOT NULL,
    MESSAGE NVARCHAR(MAX) NOT NULL,
    CREATED_AT DATETIME NOT NULL DEFAULT SYSDATETIME(),
    IS_INTERNAL BIT NOT NULL DEFAULT 0,
    FOREIGN KEY (ID_TICKETS) REFERENCES dbo.TICKETS(ID_TICKETS),
    FOREIGN KEY (ID_SENDER) REFERENCES dbo.USERS(ID_USERS)
);
PRINT 'Tabela TICKET_MESSAGES criada com sucesso.';
GO

-- Tabela TICKET_HISTORY
CREATE TABLE dbo.TICKET_HISTORY (
    ID INT IDENTITY(1,1) NOT NULL PRIMARY KEY CLUSTERED,
    ID_TICKETS INT NOT NULL,
    CHANGED_BY INT NOT NULL,
    CHANGE_DESCRIPTION NVARCHAR(MAX) NOT NULL,
    CHANGED_AT DATETIME NOT NULL DEFAULT SYSDATETIME(),
    FOREIGN KEY (ID_TICKETS) REFERENCES dbo.TICKETS(ID_TICKETS),
    FOREIGN KEY (CHANGED_BY) REFERENCES dbo.USERS(ID_USERS)
);
PRINT 'Tabela TICKET_HISTORY criada com sucesso.';
GO
